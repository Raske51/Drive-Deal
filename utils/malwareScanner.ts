import NodeClam from 'node-clamav';
import { promisify } from 'util';

// Initialize ClamAV configuration
const clamConfig = {
  removeInfected: true,
  quarantineInfected: true,
  scanLog: null,
  debugMode: false,
  fileList: null,
  scanArchives: true,
  clamscan: {
    path: '/usr/bin/clamscan',
    db: null,
    scanArchives: true,
    debugMode: false,
  },
  preference: 'clamscan',
};

// Initialize ClamAV
const clamscan = new NodeClam().init(clamConfig);

interface ScanResult {
  isInfected: boolean;
  viruses: string[];
}

export const scanBuffer = async (buffer: Buffer): Promise<ScanResult> => {
  try {
    const { isInfected, viruses } = await promisify(clamscan.scanBuffer.bind(clamscan))(buffer);
    return { isInfected, viruses };
  } catch (error) {
    console.error('Malware scan error:', error);
    throw new Error('Failed to scan file for malware');
  }
};

export const isFileInfected = async (buffer: Buffer): Promise<boolean> => {
  try {
    const result = await scanBuffer(buffer);
    if (result.isInfected) {
      console.error('Malware detected:', result.viruses);
      return true;
    }
    return false;
  } catch (error) {
    console.error('Malware scan failed:', error);
    // Fail closed - reject file if scan fails
    return true;
  }
}; 